pipeline{
    agent any
    tools{
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/akshayarsude1997/Chatbot-UI.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Chatbot \
                    -Dsonar.projectKey=Chatbot '''
                }
            }
        }
        //stage("quality gate"){
          // steps {
            //    script {
              //      waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                //}
            //} 
        //}
        //stage('OWASP FS SCAN') {
          //  steps {
            //    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
              //  dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            //}
        //}
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.json"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t chatbot ."
                       sh "docker tag chatbot akshayarsude1997/chatbot:${BUILD_NUMBER}"
                       sh "docker push akshayarsude1997/chatbot:${BUILD_NUMBER}"
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image akshayarsude1997/chatbot:${BUILD_NUMBER} > trivy.json" 
            }
        }
        stage ("Remove container") {
            steps{
                sh "docker stop chatbot | true"
                sh "docker rm chatbot | true"
             }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "Chatbot-UI"
                GIT_USER_NAME = "akshayarsude1997"
            }
            steps {
                dir('k8s'){
                    withCredentials([string(credentialsId: 'githubcred', variable: 'GITHUB_TOKEN')]) { //add githubcred as secret text credential and give ur github token to it
                        sh '''
                            git config user.email "akshayarsude1997@gmail.com"
                            git config user.name "akshayarsude1997"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=chatbot:)[^ ]+' chatbot-ui.yaml)
                            echo $imageTag
                            sed -i "s/chatbot:${imageTag}/chatbot:${BUILD_NUMBER}/" chatbot-ui.yaml
                            git add chatbot-ui.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
    }
